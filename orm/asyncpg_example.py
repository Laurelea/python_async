import asyncio
import asyncpg

"""
Функция select_students() — асинхронная. Это возможно лишь благодаря тому, что операции 1, 2 и 3 — тоже асинхронные. 
Вот что происходит внутри:
1. Сначала мы асинхронно запрашиваем подключение к БД. Почему асинхронно? Потому что это внешний запрос, который может 
занять продолжительное время и заблокировать основной поток приложения.
2. Второй запрос тоже асинхронный. Первый запрос может выполняться довольно долгое время, поэтому пусть само приложение 
в этот момент выполняет другое действие — нет смысла его блокировать.
3. Мы закрываем наше соединение, чтобы оно стало снова доступным в пуле и его могла использовать другая корутина.
Нужно обязательно закрывать соединения, потому что иначе приложение просто зависнет, ведь в пуле соединений не останется
доступных вариантов.
"""

async def select_students():
    # Создание соединения с нашей БД `practicum`
    connection = await asyncpg.connect("postgresql://postgres:postgres@localhost:5432/practicum")  # 1

    try:
        # Выполнение того самого запроса SELECT, который мы выполняли в командной оболочке до этого
        query = 'SELECT * FROM students'
        result = await connection.fetch(query)  # 2

        # Выпод полученных результатов на экран
        for row in result:
            print(f"ID: {row['id']}, Name: {row['name']}, Age: {row['age']}, Email: {row['email']}")

    finally:
        # Закрытие соединения
        await connection.close()  # 3

asyncio.run(select_students())
